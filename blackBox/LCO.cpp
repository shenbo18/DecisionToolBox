// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `LCO.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <LCO.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __LCO__BlackBox__optSchedule_name = "optSchedule";

::Ice::Object* IceInternal::upCast(::LCO::BlackBox* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::LCO::BlackBox* p) { return p; }

void
LCO::__read(::IceInternal::BasicStream* __is, ::LCO::BlackBoxPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::LCO::BlackBox;
        v->__copyFrom(proxy);
    }
}

void
LCO::UserInput::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(bridgeID);
    __os->write(bridgeAADT);
    __os->write(bridgeAADTT);
    __os->write(trafficGrowthRate);
    __os->write(discountRate);
    __os->write(componentID);
    __os->write(ratingLowerLimit);
    __os->write(startRating);
    __os->write(startYear);
    __os->write(optObject);
}

void
LCO::UserInput::__read(::IceInternal::BasicStream* __is)
{
    __is->read(bridgeID);
    __is->read(bridgeAADT);
    __is->read(bridgeAADTT);
    __is->read(trafficGrowthRate);
    __is->read(discountRate);
    __is->read(componentID);
    __is->read(ratingLowerLimit);
    __is->read(startRating);
    __is->read(startYear);
    __is->read(optObject);
}

void
LCO::ComponentRatingMat::__write(::IceInternal::BasicStream* __os) const
{
    if(ratings.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&ratings[0], &ratings[0] + ratings.size());
    }
    if(years.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        __os->write(&years[0], &years[0] + years.size());
    }
}

void
LCO::ComponentRatingMat::__read(::IceInternal::BasicStream* __is)
{
    __is->read(ratings);
    __is->read(years);
}

void
LCO::RepairInfo::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(repairID);
    __os->write(duration);
    __os->write(cost);
    __os->write(avail);
}

void
LCO::RepairInfo::__read(::IceInternal::BasicStream* __is)
{
    __is->read(repairID);
    __is->read(duration);
    __is->read(cost);
    __is->read(avail);
}

void
LCO::__writeRepairInfoMat(::IceInternal::BasicStream* __os, const ::LCO::RepairInfo* begin, const ::LCO::RepairInfo* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
LCO::__readRepairInfoMat(::IceInternal::BasicStream* __is, ::LCO::RepairInfoMat& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(17, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

LCO::BlackBoxError::BlackBoxError(const ::std::string& __ice_reason) :
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    UserException(),
#else
    ::Ice::UserException(),
#endif
    reason(__ice_reason)
{
}

LCO::BlackBoxError::~BlackBoxError() throw()
{
}

static const char* __LCO__BlackBoxError_name = "LCO::BlackBoxError";

::std::string
LCO::BlackBoxError::ice_name() const
{
    return __LCO__BlackBoxError_name;
}

::Ice::Exception*
LCO::BlackBoxError::ice_clone() const
{
    return new BlackBoxError(*this);
}

void
LCO::BlackBoxError::ice_throw() const
{
    throw *this;
}

void
LCO::BlackBoxError::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(::std::string("::LCO::BlackBoxError"), false);
    __os->startWriteSlice();
    __os->write(reason);
    __os->endWriteSlice();
}

void
LCO::BlackBoxError::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->read(myId, false);
    }
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
LCO::BlackBoxError::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception LCO::BlackBoxError was not generated with stream support";
    throw ex;
}

void
LCO::BlackBoxError::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "exception LCO::BlackBoxError was not generated with stream support";
    throw ex;
}
#endif

struct __F__LCO__BlackBoxError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow()
    {
        throw ::LCO::BlackBoxError();
    }
};

static ::IceInternal::UserExceptionFactoryPtr __F__LCO__BlackBoxError__Ptr = new __F__LCO__BlackBoxError;

const ::IceInternal::UserExceptionFactoryPtr&
LCO::BlackBoxError::ice_factory()
{
    return __F__LCO__BlackBoxError__Ptr;
}

class __F__LCO__BlackBoxError__Init
{
public:

    __F__LCO__BlackBoxError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::LCO::BlackBoxError", ::LCO::BlackBoxError::ice_factory());
    }

    ~__F__LCO__BlackBoxError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::LCO::BlackBoxError");
    }
};

static __F__LCO__BlackBoxError__Init __F__LCO__BlackBoxError__i;

#ifdef __APPLE__
extern "C" { void __F__LCO__BlackBoxError__initializer() {} }
#endif

void
IceProxy::LCO::BlackBox::optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__LCO__BlackBox__optSchedule_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::LCO::BlackBox* __del = dynamic_cast< ::IceDelegate::LCO::BlackBox*>(__delBase.get());
            __del->optSchedule(inputs, ratings, repairs, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::LCO::BlackBox::begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__LCO__BlackBox__optSchedule_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __LCO__BlackBox__optSchedule_name, __del, __cookie);
    try
    {
        __result->__prepare(__LCO__BlackBox__optSchedule_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        inputs.__write(__os);
        ratings.__write(__os);
        if(repairs.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::LCO::__writeRepairInfoMat(__os, &repairs[0], &repairs[0] + repairs.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::LCO::BlackBox::end_optSchedule(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __LCO__BlackBox__optSchedule_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::LCO::BlackBoxError&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->skipEmptyEncaps();
}

const ::std::string&
IceProxy::LCO::BlackBox::ice_staticId()
{
    return ::LCO::BlackBox::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::LCO::BlackBox::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::LCO::BlackBox);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::LCO::BlackBox::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::LCO::BlackBox);
}

::IceProxy::Ice::Object*
IceProxy::LCO::BlackBox::__newInstance() const
{
    return new BlackBox;
}

void
IceDelegateM::LCO::BlackBox::optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __LCO__BlackBox__optSchedule_name, ::Ice::Normal, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        inputs.__write(__os);
        ratings.__write(__os);
        if(repairs.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::LCO::__writeRepairInfoMat(__os, &repairs[0], &repairs[0] + repairs.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::LCO::BlackBoxError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.is()->skipEmptyEncaps();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::LCO::BlackBox::optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_inputs(inputs),
            _m_ratings(ratings),
            _m_repairs(repairs)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::LCO::BlackBox* servant = dynamic_cast< ::LCO::BlackBox*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->optSchedule(_m_inputs, _m_ratings, _m_repairs, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::LCO::UserInput& _m_inputs;
        const ::LCO::ComponentRatingMat& _m_ratings;
        const ::LCO::RepairInfoMat& _m_repairs;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __LCO__BlackBox__optSchedule_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(inputs, ratings, repairs, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::LCO::BlackBoxError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
LCO::BlackBox::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __LCO__BlackBox_ids[2] =
{
    "::Ice::Object",
    "::LCO::BlackBox"
};

bool
LCO::BlackBox::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__LCO__BlackBox_ids, __LCO__BlackBox_ids + 2, _s);
}

::std::vector< ::std::string>
LCO::BlackBox::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__LCO__BlackBox_ids[0], &__LCO__BlackBox_ids[2]);
}

const ::std::string&
LCO::BlackBox::ice_id(const ::Ice::Current&) const
{
    return __LCO__BlackBox_ids[1];
}

const ::std::string&
LCO::BlackBox::ice_staticId()
{
    return __LCO__BlackBox_ids[1];
}

::Ice::DispatchStatus
LCO::BlackBox::___optSchedule(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::LCO::UserInput inputs;
    ::LCO::ComponentRatingMat ratings;
    ::LCO::RepairInfoMat repairs;
    inputs.__read(__is);
    ratings.__read(__is);
    ::LCO::__readRepairInfoMat(__is, repairs);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    try
    {
        optSchedule(inputs, ratings, repairs, __current);
    }
    catch(const ::LCO::BlackBoxError& __ex)
    {
        __os->write(__ex);
        return ::Ice::DispatchUserException;
    }
    return ::Ice::DispatchOK;
}

static ::std::string __LCO__BlackBox_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "optSchedule"
};

::Ice::DispatchStatus
LCO::BlackBox::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__LCO__BlackBox_all, __LCO__BlackBox_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __LCO__BlackBox_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___optSchedule(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
LCO::BlackBox::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
LCO::BlackBox::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
LCO::BlackBox::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type LCO::BlackBox was not generated with stream support";
    throw ex;
}

void
LCO::BlackBox::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type LCO::BlackBox was not generated with stream support";
    throw ex;
}
#endif

void 
LCO::__patch__BlackBoxPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::LCO::BlackBoxPtr* p = static_cast< ::LCO::BlackBoxPtr*>(__addr);
    assert(p);
    *p = ::LCO::BlackBoxPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::LCO::BlackBox::ice_staticId(), v->ice_id());
    }
}
