// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `LCO.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __C__Users_Bo_Dropbox_Prof__Lepech_blackBox_blackBox_LCO_h__
#define __C__Users_Bo_Dropbox_Prof__Lepech_blackBox_blackBox_LCO_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace LCO
{

class BlackBox;

}

}

namespace LCO
{

class BlackBox;
bool operator==(const BlackBox&, const BlackBox&);
bool operator<(const BlackBox&, const BlackBox&);

}

namespace IceInternal
{

::Ice::Object* upCast(::LCO::BlackBox*);
::IceProxy::Ice::Object* upCast(::IceProxy::LCO::BlackBox*);

}

namespace LCO
{

typedef ::IceInternal::Handle< ::LCO::BlackBox> BlackBoxPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::LCO::BlackBox> BlackBoxPrx;

void __read(::IceInternal::BasicStream*, BlackBoxPrx&);
void __patch__BlackBoxPtr(void*, ::Ice::ObjectPtr&);

}

namespace LCO
{

struct UserInput
{
    ::Ice::Int bridgeID;
    ::Ice::Float bridgeAADT;
    ::Ice::Float bridgeAADTT;
    ::Ice::Float trafficGrowthRate;
    ::Ice::Float discountRate;
    ::Ice::Int componentID;
    ::Ice::Int ratingLowerLimit;
    ::Ice::Int startRating;
    ::Ice::Int startYear;
    ::Ice::Int optObject;

    bool operator==(const UserInput& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(bridgeID != __rhs.bridgeID)
        {
            return false;
        }
        if(bridgeAADT != __rhs.bridgeAADT)
        {
            return false;
        }
        if(bridgeAADTT != __rhs.bridgeAADTT)
        {
            return false;
        }
        if(trafficGrowthRate != __rhs.trafficGrowthRate)
        {
            return false;
        }
        if(discountRate != __rhs.discountRate)
        {
            return false;
        }
        if(componentID != __rhs.componentID)
        {
            return false;
        }
        if(ratingLowerLimit != __rhs.ratingLowerLimit)
        {
            return false;
        }
        if(startRating != __rhs.startRating)
        {
            return false;
        }
        if(startYear != __rhs.startYear)
        {
            return false;
        }
        if(optObject != __rhs.optObject)
        {
            return false;
        }
        return true;
    }

    bool operator<(const UserInput& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(bridgeID < __rhs.bridgeID)
        {
            return true;
        }
        else if(__rhs.bridgeID < bridgeID)
        {
            return false;
        }
        if(bridgeAADT < __rhs.bridgeAADT)
        {
            return true;
        }
        else if(__rhs.bridgeAADT < bridgeAADT)
        {
            return false;
        }
        if(bridgeAADTT < __rhs.bridgeAADTT)
        {
            return true;
        }
        else if(__rhs.bridgeAADTT < bridgeAADTT)
        {
            return false;
        }
        if(trafficGrowthRate < __rhs.trafficGrowthRate)
        {
            return true;
        }
        else if(__rhs.trafficGrowthRate < trafficGrowthRate)
        {
            return false;
        }
        if(discountRate < __rhs.discountRate)
        {
            return true;
        }
        else if(__rhs.discountRate < discountRate)
        {
            return false;
        }
        if(componentID < __rhs.componentID)
        {
            return true;
        }
        else if(__rhs.componentID < componentID)
        {
            return false;
        }
        if(ratingLowerLimit < __rhs.ratingLowerLimit)
        {
            return true;
        }
        else if(__rhs.ratingLowerLimit < ratingLowerLimit)
        {
            return false;
        }
        if(startRating < __rhs.startRating)
        {
            return true;
        }
        else if(__rhs.startRating < startRating)
        {
            return false;
        }
        if(startYear < __rhs.startYear)
        {
            return true;
        }
        else if(__rhs.startYear < startYear)
        {
            return false;
        }
        if(optObject < __rhs.optObject)
        {
            return true;
        }
        else if(__rhs.optObject < optObject)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const UserInput& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const UserInput& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const UserInput& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const UserInput& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::Ice::Int> ComponentRatings;

typedef ::std::vector< ::Ice::Int> ComponentYears;

struct ComponentRatingMat
{
    ::LCO::ComponentRatings ratings;
    ::LCO::ComponentYears years;

    bool operator==(const ComponentRatingMat& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(ratings != __rhs.ratings)
        {
            return false;
        }
        if(years != __rhs.years)
        {
            return false;
        }
        return true;
    }

    bool operator<(const ComponentRatingMat& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(ratings < __rhs.ratings)
        {
            return true;
        }
        else if(__rhs.ratings < ratings)
        {
            return false;
        }
        if(years < __rhs.years)
        {
            return true;
        }
        else if(__rhs.years < years)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const ComponentRatingMat& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const ComponentRatingMat& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const ComponentRatingMat& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const ComponentRatingMat& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct RepairInfo
{
    ::Ice::Int repairID;
    ::Ice::Int duration;
    ::Ice::Long cost;
    bool avail;

    bool operator==(const RepairInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(repairID != __rhs.repairID)
        {
            return false;
        }
        if(duration != __rhs.duration)
        {
            return false;
        }
        if(cost != __rhs.cost)
        {
            return false;
        }
        if(avail != __rhs.avail)
        {
            return false;
        }
        return true;
    }

    bool operator<(const RepairInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(repairID < __rhs.repairID)
        {
            return true;
        }
        else if(__rhs.repairID < repairID)
        {
            return false;
        }
        if(duration < __rhs.duration)
        {
            return true;
        }
        else if(__rhs.duration < duration)
        {
            return false;
        }
        if(cost < __rhs.cost)
        {
            return true;
        }
        else if(__rhs.cost < cost)
        {
            return false;
        }
        if(avail < __rhs.avail)
        {
            return true;
        }
        else if(__rhs.avail < avail)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const RepairInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const RepairInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const RepairInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const RepairInfo& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::LCO::RepairInfo> RepairInfoMat;
void __writeRepairInfoMat(::IceInternal::BasicStream*, const ::LCO::RepairInfo*, const ::LCO::RepairInfo*);
void __readRepairInfoMat(::IceInternal::BasicStream*, RepairInfoMat&);

class BlackBoxError : public ::Ice::UserException
{
public:

    BlackBoxError() {}
    explicit BlackBoxError(const ::std::string&);
    virtual ~BlackBoxError() throw();

    virtual ::std::string ice_name() const;
    virtual ::Ice::Exception* ice_clone() const;
    virtual void ice_throw() const;

    static const ::IceInternal::UserExceptionFactoryPtr& ice_factory();

    ::std::string reason;

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

static BlackBoxError __BlackBoxError_init;

}

namespace LCO
{

class Callback_BlackBox_optSchedule_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_BlackBox_optSchedule_Base> Callback_BlackBox_optSchedulePtr;

}

namespace IceProxy
{

namespace LCO
{

class BlackBox : virtual public ::IceProxy::Ice::Object
{
public:

    void optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs)
    {
        optSchedule(inputs, ratings, repairs, 0);
    }
    void optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context& __ctx)
    {
        optSchedule(inputs, ratings, repairs, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs)
    {
        return begin_optSchedule(inputs, ratings, repairs, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context& __ctx)
    {
        return begin_optSchedule(inputs, ratings, repairs, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_optSchedule(inputs, ratings, repairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_optSchedule(inputs, ratings, repairs, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::LCO::Callback_BlackBox_optSchedulePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_optSchedule(inputs, ratings, repairs, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput& inputs, const ::LCO::ComponentRatingMat& ratings, const ::LCO::RepairInfoMat& repairs, const ::Ice::Context& __ctx, const ::LCO::Callback_BlackBox_optSchedulePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_optSchedule(inputs, ratings, repairs, &__ctx, __del, __cookie);
    }

    void end_optSchedule(const ::Ice::AsyncResultPtr&);
    
private:

    void optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<BlackBox> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<BlackBox> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<BlackBox*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<BlackBox*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace LCO
{

class BlackBox : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace LCO
{

class BlackBox : virtual public ::IceDelegate::LCO::BlackBox,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace LCO
{

class BlackBox : virtual public ::IceDelegate::LCO::BlackBox,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Context*);
};

}

}

namespace LCO
{

class BlackBox : virtual public ::Ice::Object
{
public:

    typedef BlackBoxPrx ProxyType;
    typedef BlackBoxPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void optSchedule(const ::LCO::UserInput&, const ::LCO::ComponentRatingMat&, const ::LCO::RepairInfoMat&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___optSchedule(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const BlackBox& l, const BlackBox& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const BlackBox& l, const BlackBox& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace LCO
{

template<class T>
class CallbackNC_BlackBox_optSchedule : public Callback_BlackBox_optSchedule_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_BlackBox_optSchedule(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::LCO::BlackBoxPrx __proxy = ::LCO::BlackBoxPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_optSchedule(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)();
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
#endif
        }
    }

    Response response;
};

template<class T> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BlackBox_optSchedule<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BlackBox_optSchedule<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BlackBox_optSchedule<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_BlackBox_optSchedule<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_BlackBox_optSchedule : public Callback_BlackBox_optSchedule_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_BlackBox_optSchedule(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::LCO::BlackBoxPrx __proxy = ::LCO::BlackBoxPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_optSchedule(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BlackBox_optSchedule<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BlackBox_optSchedule<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BlackBox_optSchedule<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_BlackBox_optSchedulePtr
newCallback_BlackBox_optSchedule(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_BlackBox_optSchedule<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
